# load required packages
library(tidyverse)
library(plyranges)
library(ggplot2)
library(Biostrings)
library(dplyr)
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("BSgenome")
library(lme4)
library(lmerTest)

# Load in repeat information from EarlGrey
eg_gff <- read_gff('data/icerya_purchasi.filteredRepeats.divergence.gff') %>%
  mutate(type = as.character(type)) %>%
  mutate(type = sub("-.*", "", type)) %>%
  filter(!is.na(KIMURA80)) %>%
  as_tibble() %>%
  mutate(repeat_number = row_number()) %>%
  as_granges()
# Convert our data into tibble for data manipulation
eg_gff_tbl <- as_tibble(eg_gff)
# Correct the subfamily 'Penelope' (within PLE) as it is miscategorised as LINE by RepeatMasker
# Rename Penelope to move to group PLE 
eg_gff <- eg_gff_tbl %>%
  mutate(type = sub('LINE/Penelope','PLE/Penelope', type))
# Create dataframe of known repeats (remove unknown data)
eg_gff_known <- eg_gff %>%
  filter(sub("/.*","", type) %in% c("DNA", "LINE", "LTR", "PLE", "RC", "SINE"))


# Load in gene information from AUGUSTUS
gene_gff <- read_gff('data/Icerya_purchasi_DTOL_augustus.hints.gff3') %>%
  mutate(type = as.character(type)) %>%
  mutate(Grandparent = gsub('\\..*',"", ID)) 
# Convert our data into tibble for data manipulation
gene_gff_tbl <- as_tibble(gene_gff)
# Read in file with gene description 
go_csv = read_csv('data/Icerya_purchasi_DTOL_augustus.hints.interproscan.csv.txt') %>%
  mutate(Alias = sub(".t.", "", Alias))
# rename column headings spaces to '_' for ease in further functions
gene_info = read_csv('data/Icerya_purchasi_DTOL_augustus.hints.interproscan.csv.txt') %>%
  dplyr::rename(IPR_Term = `IPR Term`, 
                IPR_Description = `IPR Description`,
                Source_Term = `Source Term`,
                GO_Terms = `GO Terms`,
                Source_Description = `Source Description`) %>%
  mutate(ID = sub("\\..*", "", Alias))


# Determine which genes are likely repeats from our data set
likely_repeats <- gene_info %>%
  filter(grepl('Reverse transcriptase', IPR_Description, ignore.case=T) |
           grepl('Helitron', IPR_Description, ignore.case=T)|
           grepl('Integrase',  IPR_Description, ignore.case=T)|
           grepl('DDE',  IPR_Description, ignore.case=T)|
           grepl('endonuclease/exonuclease',  IPR_Description, ignore.case=T)|
           grepl('transposase',  IPR_Description, ignore.case=T))
# Determine which genes are likely repeats
likely_repeats <- gene_info %>% 
  filter(ID %in% likely_repeats$ID)
# Determine which genes are likely not repeats 
not_repeats <- gene_info %>%
  filter(!ID %in% likely_repeats$ID)
# Isolate genes from gff that we know are not repeats
only_genes_gff <- gene_gff %>%
  filter(Grandparent %in% not_repeats$ID) 

# Load in genome sequence of Icerya purchasi
genome_seq <- Biostrings::readDNAStringSet("data/genome/GCA_952773005.1_ihIcePurc2.1_genomic.fna")
# Rename sequence names and remove 'Icerya...'
names(genome_seq) <- sub(' .*','', names(genome_seq))



##################################################################################################

# SPLITTING GENOME INTO BINS

# Put sequence into bins of length 1,000,000
# Assign 1,000,000 to variable 'bin_size' for simplicity in later functions
bin_size = 1e6

# Following function makes a column with a list of all bin names:
# Make empty table
bins <- tibble()
genome_index <- tibble(seqnames = names(genome_seq), contig_width = width(genome_seq))
# Loop through
for(i in seq_along(genome_index$seqnames)){
  #number each bin. Combine this number onto the end of bin name
  new_tbl <- tibble(seqnames = genome_index$seqnames[i], bin_no = 1:ceiling(genome_index$contig_width[i]/bin_size)) %>%
    mutate(bin_name = paste0(seqnames, "_", bin_no))
  #combine this new column into our empty table
  bins <- rbind(bins, new_tbl)
}

# This function removes mitochondria chromosome and select for bin_name only
bins <- bins %>%
  filter(seqnames !="OX731682.1") %>%
  dplyr::select(bin_name)

# assign genome into bins 
gene_gff_bins = gene_gff_tbl_selected %>%
  mutate(
    bin_start = floor(start/bin_size)*bin_size + 1,
    bin_end = ceiling(start/bin_size)*bin_size,
  )


##################################################################################################

#   CORRECT FOR ANY OVERLAPPING REGIONS

# Check for sequences that don't overlap bins
# Repeats that don't overlap bins will be less or equal to bin end 
# Filter for repeats that are not overlapping:
gene_gff_not_overlapping <- gene_gff_bins %>% filter(end<=bin_end)

# Check for sequences that do overlap bins
# Repeat end will be more than the bin end
gene_gff_overlapping <- gene_gff_bins %>% filter(end>bin_end)

# Split overlapping regions into left and right side of the bin edge
# Left
gene_left_overlapping <- gene_gff_overlapping %>% 
  mutate(end = bin_end)
# Right
gene_right_overlapping <- gene_gff_overlapping %>%
  mutate(start = bin_end +1)
# Combine left and right overlap back together
gene_gff_tbl_binned <- rbind(gene_gff_not_overlapping, gene_left_overlapping) %>%
  rbind(gene_right_overlapping)


# Creates dataframe that numbers each bin 
gene_gff_tbl_binned_for_counting <- gene_gff_tbl_binned %>%
  mutate(bin_no = bin_end/bin_size, 
         bin_name = paste0(seqnames, "_", bin_no))
# Convert factors to characters
gene_gff_tbl_counted <- base::table(gene_gff_tbl_binned_for_counting$bin_name, gene_gff_tbl_binned_for_counting$type) %>%
  base::as.data.frame() %>%
  as_tibble() %>%
  mutate(Var1 = as.character(Var1),
         Var2 = as.character(Var2)) %>%
  dplyr::rename(bin_name = Var1, type = Var2)
# Sort bins in ascending order of chromosome number and start codon number
gene_gff_tbl_binned_arranged <- gene_gff_tbl_binned %>% 
  arrange(seqnames, start)


# generate new column of total length of each bin (bin_total)
gene_gff_tbl_binned_grouped <- gene_gff_tbl_binned_arranged %>% 
  filter(type == 'gene') %>%
  group_by(seqnames, bin_start) %>% 
  mutate(bin_total = sum(end - start +1)) %>%
  ungroup() %>%
  mutate(bin_name = paste0(seqnames, "_", bin_end/bin_size)) %>%
  dplyr::select(seqnames, bin_name, type, bin_start, bin_end, bin_total) %>%
  base::unique() %>%
  mutate(gene_number = row_number())


# generate new columns of bin_start, bin_end, bin width
# estimate percentage of each individual type in bin
gene_gff_tbl_binned_corrected <- gene_gff_tbl_binned_grouped %>%
  mutate(seqnames = sub("_.*", "", bin_name),
         bin_no = as.double(sub(".*_", "", bin_name)),
         bin_end = bin_no*bin_size,
         bin_start = bin_end-bin_size+1,
         bin_width = bin_end-bin_start+1) %>%
  mutate(percentage = 100 * bin_total/bin_width)


##################################################################################################


# ESTIMATING GENE COUNT


# to estimate count
# this function converts factors into characters and
# output: table with the columns bin_name, type and count
gene_gff_tbl_binned_for_counting <- gene_gff_tbl_binned_for_counting %>%
  mutate(type = sub(pattern = '-.*', replacement = '', x = type))

gene_gff_tbl_counted_wide <- base::table(gene_gff_tbl_binned_for_counting$bin_name, gene_gff_tbl_binned_for_counting$type) %>%
  base::as.data.frame() %>%
  as_tibble() %>%
  mutate(Var1 = as.character(Var1),
         Var2 = as.character(Var2)) %>%
  pivot_wider(names_from = Var2, values_from = Freq) %>%
  dplyr::rename(bin_name = Var1) 

as_tibble(gene_gff_tbl_counted_wide)

gene_gff_tbl_counted_long <- left_join(x = bins, y = gene_gff_tbl_counted_wide) %>%
  pivot_longer(!bin_name, names_to = 'type', values_to = 'Count') 

# double check there is no NA
filter(.data = gene_gff_tbl_counted_long, is.na(Count))

# remove subfamilies by removing '/' from type name
# so the columns are consistent in size 
gene_gff_tbl_counted_filtered <- gene_gff_tbl_counted_long %>%
  mutate(type = sub(pattern = '/.*', replacement = '', x = type)) %>%
  group_by(bin_name, type) %>%
  summarise(Total = sum(Count)) %>%
  ungroup()

# group_by() function has sorted 'bin_name' differently from our dataframes because bin_name is a character 
# following function filters each type and merges count of each subfamily into one variable
# then corrects for bin_name so it is consistent with other dataframes
gene_gff_tbl_counted_filtered <- gene_gff_tbl_counted_filtered %>%
  mutate(bin_name = gene_gff_tbl_counted_long$bin_name, bin_name)

# Estimates the count of genes in each bin
# and adds the correct bin_name column to our dataframe
GENE_counted <- gene_gff_tbl_counted_filtered %>%
  filter(grepl('gene', type)) %>%
  rename(Count = Total)


#visualise spread of Gene count 
hist(GENE_counted$Count)


##################################################################################################

# PLOTTING GENE COUNT DISTRIBUTION

# plot number of genes in each bin
GENE_grouped <- GENE_counted %>%
  mutate(seqnames = sub("_.*", "", bin_name)) %>%
  mutate(bin_no = as.double(sub(".*_", "", bin_name)),
         bin_no = as.double(sub(".*_", "", bin_name)),
         bin_end = bin_no*bin_size,
         bin_start = bin_end-bin_size+1) %>%
  mutate(bin_name = sub("OX73168..1_", "", bin_name)) %>%
  mutate(bin_name = as.integer(bin_name)) %>%
  dplyr::select(seqnames, bin_name, bin_start, Count)

# rename and number chromosome sets
for_plotting_gene <- GENE_grouped %>%
  mutate(seqnames = sub('OX731680.1','Chromosome 1', seqnames)) %>%
  mutate(seqnames = sub('OX731681.1','Chromosome 2', seqnames))

# plot gene count dsitribution 
plot_gene <- ggplot(for_plotting_gene, mapping = aes(x = bin_start, y = Count, fill = Count)) + 
  geom_histogram(stat = "identity", width = 1e6) +
  facet_wrap(~seqnames, ncol = 1) + 
  labs(fill = "Gene Count")

plot_gene <- plot_gene + scale_fill_gradient(low="maroon4", high="violet")
#label x and y axis, change font size and theme
plot_gene <- plot_gene + xlab('Chromosome Position') + ylab('Gene Density')
plot_gene <- plot_gene + theme_bw() + theme(text = element_text(size=15))
plot_gene




##########################################################################################

# DETERMINING GENE REGIONS IN THE GENOME

# we want to filter for exons and introns
genes_gff <- gene_gff %>%
  filter(type == 'gene')

exons_gff <- gene_gff %>%
  filter(type == "exon")

introns_gff <- gene_gff %>%
  filter(type == "intron")

# Estimating their ranges 
# GET GENE RANGES

# get ranges for genes, exons and introns
genes_gff <- gene_gff %>%
  filter(type == "gene") %>%
  as_tibble() %>%
  mutate(gene_number = row_number()) %>%
  as_granges()


# Get upstream ranges
upstream_ranges <- genes_gff %>%
  as_tibble() %>%
  mutate(upstream_start = ifelse(strand == "+", start - 2001, end +1),
         upstream_end = ifelse(strand == "+", start - 1, end + 2001)) %>%
  dplyr::select(seqnames, upstream_start, upstream_end, strand, ID, gene_number) %>%
  dplyr::rename(start = upstream_start, end = upstream_end) %>%
  dplyr::arrange(seqnames, start) %>%
  as_granges()

# merge overlapping ranges 
# for genes 
genes_ranges_reduced <- reduce_ranges_directed(genes_gff)

# for upstream 
upstream_ranges_reduced <- reduce_ranges_directed(upstream_ranges)

# following function fits the upstream section to correct range size
# by removing where it overlaps upstream genes
# so we get true range of upstream region

# first split into each strand
#for genes
genes_ranges_reduced_fwd <- genes_ranges_reduced %>%
  filter(strand == "+")

genes_ranges_reduced_rev <- genes_ranges_reduced %>%
  filter(strand == "-")

#for upstream
upstream_ranges_reduced_fwd <- upstream_ranges_reduced %>%
  filter(strand == "+")

upstream_ranges_reduced_rev <- upstream_ranges_reduced %>%
  filter(strand == "-")


# Perform subtract function (taking away gene regions that overlap upstream region) on each strand
upstream_subtract_fwd <- subtract(upstream_ranges_reduced_fwd, genes_ranges_reduced_fwd) |>
  unlist()

upstream_subtract_rev <- subtract(upstream_ranges_reduced_rev, genes_ranges_reduced_rev) |>
  unlist()

# Join and fix end coordinates
upstream_subtract <- c(upstream_subtract_fwd, upstream_subtract_rev) %>%
  as_tibble() %>%
  mutate(seqnames = as.character(seqnames)) %>%
  inner_join(genome_index) %>%
  mutate(start = ifelse(start < 1, 1, start),
         end = ifelse(end > contig_width, contig_width, end)) %>%
  dplyr::select(-width, -contig_width) %>%
  arrange(seqnames, start) %>%
  as_granges()

# join genes to nearest upstream
# output is our flanking regions of the upstream of genes
nearest_upstream <- join_nearest_downstream(upstream_subtract, genes_gff) %>%
  as_tibble() %>% 
  mutate(gene_type = type, gene_ID = ID) %>%
  dplyr::select(seqnames, start, end, width, strand, gene_type, gene_ID, Grandparent, gene_number) %>%
  as_granges()

